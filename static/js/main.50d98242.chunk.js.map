{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycAccount","tokenSaleAddress","tokenAddress","userTokens","totalSuply","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","instanceMyTokenContract","Contract","MyTokenContract","abi","networks","address","instanceMyTokenSaleContract","MyTokenSaleContract","instanceKycContract","KycContract","listenToTokenTransfer","updateTotalSuply","setState","updateUserTokens","alert","error","methods","balanceOf","call","totalSupply","events","Transfer","to","on","handleInputChange","event","target","value","type","checked","name","handleBtnWhiteList","setKycCompleted","send","from","handleBuyTokens","buyTokens","utils","toWei","this","className","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50d98242.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Accounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\nimport MyTokenContract from \"./contracts/MyToken.json\";\nimport MyTokenSaleContract from \"./contracts/MyTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded: false, kycAccount: \"Write your account address here\", tokenSaleAddress: null, tokenAddress: null, userTokens: 0, totalSuply: 0 };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n\n      this.instanceMyTokenContract = new this.web3.eth.Contract(\n        MyTokenContract.abi,\n        MyTokenContract.networks[this.networkId] && MyTokenContract.networks[this.networkId].address,\n      );\n\n      this.instanceMyTokenSaleContract = new this.web3.eth.Contract(\n        MyTokenSaleContract.abi,\n        MyTokenSaleContract.networks[this.networkId] && MyTokenSaleContract.networks[this.networkId].address,\n      );\n\n      this.instanceKycContract = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\n      );\n\n      this.listenToTokenTransfer();\n      this.updateTotalSuply();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ loaded: true, tokenSaleAddress: MyTokenSaleContract.networks[this.networkId].address, tokenAddress: MyTokenContract.networks[this.networkId].address }, this.updateUserTokens);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  updateUserTokens = async () => {\n    let userTokens = await this.instanceMyTokenContract.methods.balanceOf(this.accounts[0]).call();\n    this.setState({ userTokens: userTokens });\n  }\n\n  updateTotalSuply = async () => {\n    let totalSuply = await this.instanceMyTokenContract.methods.totalSupply().call();\n    this.setState({ totalSuply: totalSuply });\n  }\n\n  listenToTokenTransfer = () => {\n    this.instanceMyTokenContract.events.Transfer({ to: this.accounts[0] }).on(\"data\", this.updateUserTokens);\n    this.instanceMyTokenContract.events.Transfer({ to: this.accounts[0] }).on(\"data\", this.updateTotalSuply);\n  }\n\n  handleInputChange = (event) => {\n    let target = event.target;\n    let value = event.target.type === \"checkbox\" ? target.checked : target.value;\n    let name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleBtnWhiteList = async () => {\n    await this.instanceKycContract.methods.setKycCompleted(this.state.kycAccount).send({ from: this.accounts[0] });\n    alert(\"The account \" + this.state.kycAccount + \" was white listed.\");\n  };\n\n  handleBuyTokens = async () => {\n    await this.instanceMyTokenSaleContract.methods.buyTokens(this.accounts[0]).send({ from: this.accounts[0], value: this.web3.utils.toWei(\"1\", \"wei\") });\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Super Rentable Ariel Token Sale</h1>\n        <p>Wanna be rich???</p>\n        <p>Get your super rentable Ariel tokens now!! ;)</p>\n        <div className=\"MainDiv\">\n          <h2>1st step</h2>\n          <label>Whitelist your account</label><br></br>\n          <input type=\"text\" name=\"kycAccount\" value={this.state.kycAccount} onChange={this.handleInputChange}></input>\n          <button type=\"button\" name=\"btnwhiteListAccount\" onClick={this.handleBtnWhiteList}><b>Whitelist now</b></button>\n          <h2>2nd step</h2>\n          <button type=\"button\" onClick={this.handleBuyTokens}>Just click here!</button>\n          <p>You currently have: <b>{this.state.userTokens}</b> Super Rentable Ariel Tokens</p>\n          <h2>3rd step</h2>\n          Enjoy your tokens! ;)\n          <p className=\"pextra\">Extra Information</p>\n          <div className=\"ExtraInfo\">\n            <p>Current Total Supply: <b>{this.state.totalSuply}</b></p>\n            <p>MyTokenSale Contract Address: <b>{this.state.tokenSaleAddress}</b> <label>You can buy tokens, sending Wei to this address:</label></p>\n            <p>MyToken Contract Address: <b>{this.state.tokenAddress}</b></p>\n            <p> </p>\n          </div>\n          <br />\n          Note: <label>This web page is configured to work with the Ropsten Test Network</label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}